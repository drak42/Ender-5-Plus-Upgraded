# This file contains common pin mappings for the BigTreeTech SKR 2.
# To use this config, the firmware should be compiled for the
# STM32F407 with a "32KiB bootloader".

# The "make flash" command does not work on the SKR 2. Instead,
# after running "make", copy the generated "out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the SKR 2
# with that SD card.

# See docs/Config_Reference.md for a description of parameters.

# Note: The initial revision of this board has a flaw that can cause
# damage to itself and other boards. Be sure to verify the board is
# not impacted by this flaw before using it.

[stepper_x]
step_pin: PE2
dir_pin: !PE1
enable_pin: !PE3
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC1
position_endstop: 350
position_max: 350
homing_speed: 100

[stepper_y]
step_pin: PD5
dir_pin: !PD4
enable_pin: !PD6
microsteps: 16
rotation_distance: 40
endstop_pin: ^PC3
position_endstop: 350
position_max: 350
homing_speed: 100

[stepper_z]
step_pin: PA15
dir_pin: !PA8
enable_pin: !PD1
microsteps: 16
rotation_distance: 4
endstop_pin: probe:z_virtual_endstop
position_max: 400
position_min: -3

[stepper_z1]
step_pin: PD11
dir_pin: !PD10
enable_pin: !PD13
microsteps: 16
rotation_distance: 4


[safe_z_home]
home_xy_position: 175, 175
speed: 100
z_hop: 10
z_hop_speed: 5


[extruder]
step_pin: PD15
dir_pin: !PD14
enable_pin: !PC7
microsteps: 16
rotation_distance: 24
nozzle_diameter: 0.400
filament_diameter: 1.750
pressure_advance = 0.089
heater_pin: PB3
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA2
control = pid
pid_kp = 29.772
pid_ki = 2.134
pid_kd = 103.831
min_temp: 5
max_temp: 300

[heater_bed]
heater_pin: PD7
sensor_type: NTC 100K beta 3950
sensor_pin: PA1
control = pid
pid_kp = 65.969
pid_ki = 0.768
pid_kd = 1417.515
min_temp: 0
max_temp: 130

[bltouch]
sensor_pin: ^PE4
control_pin: PE5
set_output_mode: 5V
pin_move_time: 0.675
stow_on_each_sample: True
probe_with_touch_mode: True
pin_up_touch_mode_reports_triggered: False
x_offset: -60
y_offset: 0
z_offset = 2.950
speed: 20
lift_speed: 50

[bed_mesh]
algorithm: bicubic
speed: 150
horizontal_move_z: 10
mesh_min: 20,20
mesh_max: 290,330
probe_count: 5,5
fade_end: 10
mesh_pps: 2,2
fade_start: 1
fade_target: 0


[bed_mesh default]
#version = 1
#points =
# 	  -0.498750, -0.293750, -0.057500, 0.206250, 0.442500
# 	  -0.500000, -0.322500, -0.060000, 0.211250, 0.503750
# 	  -0.495000, -0.347500, -0.127500, 0.127500, 0.422500
# 	  -0.465000, -0.322500, -0.125000, 0.131250, 0.422500
# 	  -0.440000, -0.292500, -0.107500, 0.117500, 0.375000
#tension = 0.2
#min_x = -40.0
#algo = bicubic
#y_count = 5
#mesh_y_pps = 2
#min_y = 10.0
#x_count = 5
#max_y = 300.0
#mesh_x_pps = 2
#max_x = 230.0



#[bed_screws]
#screw1: 40,20
#screw2: 40,280
#screw3: 360,280
#screw4: 320,20

[screws_tilt_adjust]
screw1: 60,40
screw1_name: front_left
screw2: 325,40
screw2_name: front_right
screw3: 60,315
screw3_name: back_left
screw4: 325,315
screw4_name: back_right

[z_tilt]
z_positions: 340, 175
    80,175
points: 340, 175
    80,175
speed: 50
horizontal_move_z: 10
retries: 10
retry_tolerance: 0.002

[fan]
pin: PB6

[heater_fan fan1]
pin: PB7
#Heater_temp: 50
#Heater: extruder

#[heater_fan fan2]
#pin: PB5

# Due to BTT implementing a Marlin-specific safety feature,
# "anti-reversal stepper protection", this pin needs pulling
# high to pass power to stepper drivers and most FETs

[output_pin motor_power]
pin: PC13
value: 1

[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_3A002B000D47393438343535-if00

[pause_resume]

[display_status]

[virtual_sdcard]
path: ~/gcode_files

[include ~/macros/*.cfg]

[include kiauh_macros.cfg]

[gcode_arcs]
resolution: 1.0

[printer]
kinematics: cartesian
max_velocity: 400
max_accel: 3500
max_accel_to_decel:3500
max_z_velocity: 5
max_z_accel: 100

[input_shaper]
shaper_freq_x: 36.45  # frequency for the X mark of the test model
shaper_freq_y: 30.53  # frequency for the Y mark of the test model
shaper_type: mzv

[neopixel my_neopixel]
pin: PE6
chain_count: 24
color_order: GRB
#   Set the pixel order required by the LED hardware. Options are GRB,
#   RGB, GRBW, or RGBW. The default is GRB.
initial_RED: 0.0
initial_GREEN: 0.0
initial_BLUE: 0.0


########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PC5, EXP1_3=PB1, EXP1_5=PE10, EXP1_7=PE12, EXP1_9=<GND>,
    EXP1_2=PB0, EXP1_4=PE9, EXP1_6=PE11, EXP1_8=PE13, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PA6, EXP2_3=PE7, EXP2_5=PB2, EXP2_7=PC4,   EXP2_9=<GND>,
    EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=<NC>

# See the sample-lcd.cfg file for definitions of common LCD displays.

########################################
# TMC2209 configuration
########################################

[tmc2209 stepper_x]
uart_pin: PE0
run_current: 0.800
hold_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[tmc2209 stepper_y]
uart_pin: PD3
run_current: 0.800
hold_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[tmc2209 stepper_z]
uart_pin: PD0
run_current: 0.800
hold_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[tmc2209 stepper_z1]
uart_pin: PD12
run_current: 0.800
hold_current: 0.800
diag_pin:
stealthchop_threshold: 999999

[tmc2209 extruder]
uart_pin: PC6
run_current: 0.600
diag_pin:
stealthchop_threshold: 999999


######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

##
##[gcode_macro heating_bed_indicator]
# turn on RED using a variable PWM between 0-255, turn off all other LED colors 
##gcode:
##	set_pin PIN=my_LED_pin_BLUE VALUE=0
##	set_pin PIN=my_LED_pin_RED VALUE={params.LED_BRIGHTNESS|int}
##	set_pin PIN=my_LED_pin_GREEN VALUE=0
##	set_pin PIN=my_LED_pin_WHITE VALUE=0

##[gcode_macro heating_nozzle_indicator]
# turn on RED full brightness and BLUE using a variable PWM between 0-255, turn off all other LED colors 
##gcode:
##	set_pin PIN=my_LED_pin_RED VALUE=255
##	set_pin PIN=my_LED_pin_BLUE VALUE={params.LED_BRIGHTNESS|int}
##	set_pin PIN=my_LED_pin_GREEN VALUE=0
##	set_pin PIN=my_LED_pin_WHITE VALUE=0

# Pre heat the bed and update LED brightness based on current bed temp vs target bed temp ratio
# Then start nozzle heating procedure 
##[delayed_gcode pre_heat_bed]
##gcode:
	# Update bed indicator LEDs until temparture reached (PWM value from 0 to 255)
##	{% if (printer.heater_bed.temperature|int) < (printer.heater_bed.target|int) %}
##		heating_bed_indicator LED_BRIGHTNESS={printer.heater_bed.temperature|int / printer.heater_bed.target|int * 255}
##			UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=2
##	{% else %}
		# Notify when bed is at target temperature
##		{printer.gcode.action_respond_info(
##			"Bed Heating Finished")}
		# Set nozzle target temperature
##		M104 S{	printer["gcode_macro pre_printing_sequence"].nozzle_temp|int}
		# Start nozzle heating sequence
##		UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=1
		# Stop updating bed heating indicator LEDs
##		UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=0
##	{% endif %}

# Pre heat the nozzle and update LED brightness based on current nozzle temp vs target nozzle temp ratio
# Then start purging procedure
##[delayed_gcode pre_heat_nozzle]
##gcode:
	# Update nozzle indicator LEDs until temparture reached (PWM value from 0 to 255)
##	{% if (printer.extruder0.temperature|int) < (printer.extruder0.target|int) %}
##		heating_nozzle_indicator LED_BRIGHTNESS={printer.extruder0.temperature|int / printer.extruder0.target|int * 255}
##		UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=1
##	{% else %}
		# Notify when nozzle is at target temperature
##		{printer.gcode.action_respond_info(
##			"Nozzle Heating Finished")}
		# Start purge line sequence indicator
##		purge_sequence_indicator
		# Start purge line printing sequence
##		purge_sequence
		# Stop updating nozzle heating indicator LEDs
##		UPDATE_DELAYED_GCODE ID=pre_heat_nozzle DURATION=0
##	{% endif %}

# Home all axis and start bed heating procedure
##[gcode_macro pre_printing_sequence]
##variable_nozzle_temp: 0
##gcode:
	# Home all
##	G28
##	turn_lights_off
	# Set bed target temperature
##	M140 S{params.TARGET_TEMP_BED|int}
	# store nozzle temp variable for later
##	SET_GCODE_VARIABLE MACRO=pre_printing_sequence VARIABLE=nozzle_temp VALUE={params.TARGET_TEMP_NOZZLE}
	# Start bed heating sequence
##	UPDATE_DELAYED_GCODE ID=pre_heat_bed DURATION=1

# Home Z again after operating temperature reached
# Then print purge line
# Then turn on printing LEDs
##[gcode_macro purge_sequence]
##gcode:
##	# home z again now printer is at temperature
##	G28 Z 
##	# reset extruder to 0
##	G92 E0
##	# Move nozzle to front of bed  ;G1 E2 F1000
##	G1 X40 Y2 Z1 F2000
##	# Purge start line
##	G1 X60.0 Z0.35 E9.0 F900.0
##	# Finish purge line
##	G1 X100.0 Z0.35 E11 F300.0
##	# Raise z during pause (not sure why it pauses here)
##	G1 Z10 F2000
##	# Reset extruder to 0
##	G92 E0
##	# Turn on printing LEDs
##	start_printing_indicator
##

##[gcode_macro M105]
##rename_existing:    M105.1
##gcode:  

##   M105.1

   #if the extruder is off
##   {% if printer.extruder.target == 0 %}

      #Set the LED to red if the extruder is off but is still hot, otherwise 
      # set the color to green
##      {% if printer.extruder.temperature > 60.0 %}
##         SET_LED LED=temp_leds RED=1 GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1
##      {% else %}
##         SET_LED LED=temp_leds RED=0 GREEN=1 BLUE=0 INDEX=0  TRANSMIT=1
##      {% endif %}     

##   {% else %}

         #if the extruder temp is at target temperature 
##         {% if printer.extruder.temperature >= printer.extruder.target - 4.0 %}
##            SET_LED LED=temp_leds RED=1 GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1

         #if the extruder is still heating
##         {% else %}
##            {% set scaler = printer.extruder.temperature|float / printer.extruder.target|float %}
##            SET_LED LED=temp_leds RED={ scaler|float * 1 } GREEN=0 BLUE=0 INDEX=0  TRANSMIT=1
##         {% endif %}  

##   {% endif %}

[gcode_macro FILAMENT_CHANGE]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-100 F1000
    RESTORE_GCODE_STATE NAME=M600_state

    ######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT.

[gcode_macro START_PRINT]
gcode:
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    # Start bed heating
    M140 S{BED_TEMP}
    # Use absolute coordinates
    G90
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Home the printer
    G28
    # Move the nozzle near the bed
    G1 Z5 F3000
    # Move the nozzle very close to the bed
    G1 Z0.15 F300
    # Wait for bed to reach temperature
    M190 S{BED_TEMP}
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}

[gcode_macro END_PRINT]
gcode:
    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M106 S0
    # Move nozzle away from print while retracting
    G91
    G1 X-2 Y-2 E-3 F300
    # Raise nozzle by 10mm
    G1 Z10 F3000
    G90
    # Disable steppers
    M84

#[gcode_macro _TIMELAPSE_NEW_FRAME]
#gcode:
 #{action_call_remote_method("timelapse_newframe")}
 #; leave this in a separate macro!

[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
  ;SAVE_GCODE_STATE NAME=SNAPSHOT
  ;M117 move your head/bed here, do retracts and so on
  ;G4 P500 ;dwell
  _TIMELAPSE_NEW_FRAME
  ;G4 P500 ;moar dwelling
  ;M117 don't forget to un-retract!
  ;RESTORE_GCODE_STATE NAME=SNAPSHOT
[gcode_macro TIMELAPSE_RENDER]
gcode:
    {action_call_remote_method("timelapse_render")}

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [bltouch]
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.118750, -0.130000, -0.166250, -0.126250, -0.026250
#*# 	  0.022500, -0.030000, -0.048750, -0.036250, 0.070000
#*# 	  0.098750, 0.030000, 0.015000, 0.013750, 0.071250
#*# 	  0.215000, 0.130000, 0.070000, 0.041250, 0.118750
#*# 	  0.281250, 0.242500, 0.222500, 0.192500, 0.193750
#*# tension = 0.2
#*# min_x = 20.0
#*# algo = bicubic
#*# y_count = 5
#*# mesh_y_pps = 2
#*# min_y = 20.0
#*# x_count = 5
#*# max_y = 330.0
#*# mesh_x_pps = 2
#*# max_x = 290.0
